type _Schema_
@fulltext(
    name: "userSearch"
    language: en
    algorithm: rank
    include: [{ entity: "User", fields: [{ name: "address" }] }]
  )
@fulltext(
    name: "listingSearch"
    language: en
    algorithm: rank
    include: [{ entity: "MarketItem", fields: [{ name: "user" }, { name: "date" }, { name: "collection_address" }] }]
  )
@fulltext(
    name: "offerSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Offer", fields: [{ name: "user" }, { name: "date" }, { name: "collection_address" }] }]
  )
  @fulltext(
    name: "bidSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Bid", fields: [{ name: "user" }, { name: "date" }, { name: "collection_address" }] }]
  )
  @fulltext(
    name: "tradeSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Trade", fields: [{ name: "user" }, { name: "nft" }, { name: "collection_address" }] }]
  )
  @fulltext(
    name: "nftSearch"
    language: en
    algorithm: rank
    include: [{ entity: "NFT", fields: [{ name: "token_address" }, { name: "token_id" }, { name: "owner_of" }] }]
  )

enum StatsType {
  users
  listings
  sales
  volume
  bids
  bidVolume
  offers
  trades
  blindBids
  blindOffers
  blindTrades
}

type Stats @entity {
  id: ID!
  type: StatsType!
  count: BigInt!
}

type User @entity {
  id: ID! #address
  stats: [Stats!]!
  marketItems: [MarketItem!] @derivedFrom(field: "user")
  swaps: [Swap!] @derivedFrom(field: "buyer")
  bids: [Bid!] @derivedFrom(field: "bidder")
  offers: [Offer!] @derivedFrom(field: "offerer")
  trades: [Trade!] @derivedFrom(field: "trader")
  rewardsClaimed: [RewardsUser!] @derivedFrom(field: "user")
  mints: [Mint!] @derivedFrom(field: "minter")
}

type MarketItem @entity {
  id: ID!
  stats: [Stats!]!
  user: User!
  nft: NFT! 
  itemId: BigInt
  amount1155: BigInt
  price: BigInt
  bids: [Bid!] @derivedFrom(field: "item")
  offers: [Offer!] @derivedFrom(field: "item")
  trades: [Trade!] @derivedFrom(field: "item")
}

enum MediaType {
  audio
  video
  image
}

type Media @entity {
  id: ID!
  media: Bytes!
  type: MediaType!
}

enum NFTType {
  ERC721
  ERC1155
}

type Trait @entity {
  id: ID!
  trait: Bytes!
  attribute: Bytes!
}

type Metadata @entity {
  id: ID!
  type: NFTType!
  uri: Bytes
  media: Media
  name: Bytes
  symbol: Bytes
  traits: [Trait!]
  ranking: BigInt
}

type NFT @entity {
  id: ID! #token_address + token_id
  contract_type: Bytes!
  token_address: Bytes!
  token_id: BigInt!
  owner_of: Bytes!
  metadata: Metadata!
}

type Collection @entity {
  id: ID! #address
  address: Bytes!
  metadata: Metadata!
  name: Bytes!
  canTrade: Boolean!
}

enum OrderType {
  listed
  blind
  tradeItem
}

type Token @entity {
  id: ID! # address
  name: String!
  symbol: String!
  decimals: BigInt!
}

type Swap @entity {
  id: ID! # tx
  date: BigInt!
  type: OrderType!
  item: MarketItem!
  buyer: User!
  value: BigInt!
  amount1155: BigInt!
}

type Mint @entity {
  id: ID! # tx
  date: BigInt!
  minter: User!
  nftIds: BigInt!
  amounts: BigInt!
}

type Offer @entity {
  id: ID!
  type: OrderType!
  date: BigInt!
  item: MarketItem! @derivedFrom(field: "offers")
  offerId : BigInt!
  value: BigInt!
  offerer: User!
  isSpecific: Boolean! # bool
  token: Token!
  amount: BigInt!
  valid: Boolean!
}

type Bid @entity {
  id: ID!
  type: OrderType!
  date: BigInt!
  item: MarketItem! @derivedFrom(field: "bids")
  bidId : BigInt!
  bidder: User!
  value: BigInt!
  user: Bytes! #address
  isSpecific: Boolean! # bool
  valid: Boolean!
}

type Trade @entity {
  id: ID!
  type: OrderType!
  date: BigInt!
  item: MarketItem! @derivedFrom(field: "trades")
  tradeId : BigInt!
  trader: User!
  isSpecific: Boolean! # bool
  valid: Boolean!
}

enum RewardType {
  dao
  dev
  user
  pham
}

type RewardsToken @entity {
  id: ID!
  token: Token!
  amount: BigInt!
}

type ClaimedRewards @entity {
  id: ID!
  date: BigInt!
  type: RewardType!
  eth: BigInt!
  tokens: [RewardsToken!]
}

type RewardsUser @entity {
  id: ID!
  user: User! @derivedFrom (field: "rewardsClaimed")
  count: BigInt!
  type: RewardType!
  createdAt: BigInt!
  claims: [ClaimedRewards!]
  alpha: BigInt
  delta: BigInt
  omega: BigInt
}

type ClaimClock @entity {
  id: ID!
  time: BigInt!
  alpha: BigInt!
  delta: BigInt!
  omega: BigInt!
  totalUsers: BigInt!
  totalDevs: BigInt!
  totalEther: BigInt!
  tokens: [RewardsToken!]
}

enum ReceivedRewardsType {
  eth
  tokens
}

type ReceivedRewards @entity {
  id: ID!
  type: ReceivedRewardsType!
  value: BigInt
  amount: BigInt
  token: RewardsToken
}
