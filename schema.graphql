type User @entity {
  id: ID!
  address: Bytes!
  listedItems: [ListedItem] @derivedFrom(field: "user")
  bids: [Bid] @derivedFrom(field: "user")
  offers: [Offer] @derivedFrom(field: "user")
  trades: [Trade] @derivedFrom(field: "user")
  blindBids: [BlindBid] @derivedFrom(field: "user")
  blindOffers: [BlindOffer] @derivedFrom(field: "user")
  blindTrades: [BlindTrade] @derivedFrom(field: "user")
  userRewards: [Reward] @derivedFrom(field: "user")
  mints: [Mint] @derivedFrom(field: "user")
}

type ListedItem @entity {
  id: ID!
  user: User!
  nft: NFT!
  itemId: BigInt!
  amount1155: BigInt!
  price: BigInt!
  bids: [Bid] @derivedFrom(field: "item")
  offers: [Offer] @derivedFrom(field: "item")
  trades: [Trade] @derivedFrom(field: "item")
}

type UnListedItem @entity {
  id: ID!
  user: User!
  nft: NFT!
  trades: [Trade] @derivedFrom(field: "tradeItem")
  blindBids: [BlindBid] @derivedFrom(field: "item")
  blindOffers: [BlindOffer] @derivedFrom(field: "item")
  blindTrades: [BlindTrade] @derivedFrom(field: "tradeItem")
}

type TradeItem @entity {
  id: ID!
  user: User!
  nft: NFT!
  tradeId: BigInt!
  type: OrderType!
}

enum MediaType {
  audio
  video
  image
}

type Media @entity {
  id: ID!
  media: Bytes!
  type: MediaType!
}

enum NFTType {
  art
  collectible
  domain
  music
  photography
  sports
  trading_card
  game
  utility
  virtual_world
  other
}

type Metadata @entity {
  id: ID!
  type: NFTType!
  uri: Bytes
  media: Media
  name: Bytes!
  symbol: Bytes!
  traits: [Trait]
  ranking: BigInt
}

type NFT @entity {
  id: ID!
  contract_type: Bytes!
  token_address: Bytes!
  token_id: BigInt!
  owner_of: Bytes!
  metadata: Metadata!
}

type Trait @entity {
  id: ID!
  trait: Bytes!
  attribute: Bytes!
}

type Collection @entity {
  id: ID!
  address: Bytes!
  metadata: Metadata!
  canTrade: Boolean
}

enum OrderType {
  listed
  blind
}

type Swap @entity {
  id: ID! # tx
  date: BigInt!
  type: OrderType!
  item: ListedItem!
  buyer: User!
  value: BigInt!
  amount1155: BigInt!
  fee: BigInt!
}

type Bid @entity {
  id: ID!
  date: BigInt!
  type: OrderType!
  item: ListedItem!
  bidder: User!
  bidId: BigInt
  value: BigInt!
}

type Offer @entity {
  id: ID!
  date: BigInt!
  type: OrderType!
  item: ListedItem!
  offerer: User!
  token: Token!
  amount: BigInt!
  amount1155: BigInt!
}

type Trade @entity {
  id: ID!
  date: BigInt!
  type: OrderType!
  item: ListedItem!
  tradeItem: UnListedItem!
  user: User!
  token_id: BigInt!
  tradeId: BigInt
}

type Mint @entity {
  id: ID! # tx
  date: BigInt!
  user: User!
  nftIds: BigInt!
  amounts: BigInt!
}

type Token @entity {
  id: ID! # address
  name: String!
  symbol: String!
  totalSupply: BigInt!
}

enum RewardType {
  dao
  dev
  user
  pham
}

type RewardsToken {
  id: ID!
  token: Token!
  amount: BigInt!
}

type RewardsClaimed @entity {
  id: ID!
  date: BigInt!
  type: RewardType!
  eth: BigInt!
  tokens: [RewardsToken!]
}

type RewardsUser {
  id: ID!
  user: User!
  type: RewardType!
  createdAt: BigInt!
  claims: [RewardsClaimed]
  alpha: BigInt
  delta: BigInt
  omega: BigInt
}

type ClaimClock @entity {
  id: ID!
  alpha: BigInt
  delta: BigInt
  omega: BigInt
  totalEther: BigInt!
  totalUsers: BigInt!
}

enum ReceivedRewardsType {
  eth
  tokens
}

type ReceivedRewards @entity {
  id: ID!
  type: ReceivedRewardsType!
  value: BigInt
  amount: BigInt
  token: RewardsToken
}

